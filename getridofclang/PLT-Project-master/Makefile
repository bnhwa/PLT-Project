# "make test" Compiles everything and runs the regression tests

.PHONY : test
test : all testall.sh
	./testall.sh

# "make all" builds the executable as well as the "printbig" library designed
# to test linking external code

.PHONY : all
all : xirtam.native matrix.o

# "make microc.native" compiles the compiler
#
# The _tags file controls the operation of ocamlbuild, e.g., by including
# packages, enabling warnings
#
# See https://github.com/ocaml/ocamlbuild/blob/master/manual/manual.adoc

xirtam.native : matrix.bc
	opam config exec -- \
	ocamlbuild -use-ocamlfind xirtam.native -pkgs llvm,llvm.analysis,llvm.bitreader

# "make clean" removes all generated files

.PHONY : clean
clean :
	ocamlbuild -clean
	rm -rf testall.log ocamlllvm *.diff *.ll *.exe *.s *.o *.bc matrix

matrix : matrix.c 
	cc -o matrix -DBUILD_TEST matrix.c 

matrix: matrix.c
	cc -o matrix matrix.c 

# matrix.bc : matrix.c 
# 	clang -emit-llvm -o matrix.bc -c matrix.c -Wno-varargs
	
# Testing the "printbig" example

# printbig : printbig.c
# 	cc -o printbig -DBUILD_TEST printbig.c

# Building the tarball

# TESTS = \
#   add1 arith1 arith2 arith3 fib float1 float2 float3 for1 for2 func1 \
#   func2 func3 func4 func5 func6 func7 func8 func9 gcd2 gcd global1 \
#   global2 global3 hello if1 if2 if3 if4 if5 if6 local1 local2 ops1 \
#   ops2 printbig var1 var2 while1 while2
#
# FAILS = \
#   assign1 assign2 assign3 dead1 dead2 expr1 expr2 expr3 float1 float2 \
#   for1 for2 for3 for4 for5 func1 func2 func3 func4 func5 func6 func7 \
#   func8 func9 global1 global2 if1 if2 if3 nomain printbig printb print \
#   return1 return2 while1 while2
#
# TESTFILES = $(TESTS:%=test-%.mc) $(TESTS:%=test-%.out) \
# 	    $(FAILS:%=fail-%.mc) $(FAILS:%=fail-%.err)
#
# TARFILES = ast.ml sast.ml codegen.ml Makefile _tags microc.ml microcparse.mly \
# 	README scanner.mll semant.ml testall.sh \
# 	printbig.c arcade-font.pbm font2c \
# 	Dockerfile \
# 	$(TESTFILES:%=tests/%)
#
# microc.tar.gz : $(TARFILES)
# 	cd .. && tar czf microc/microc.tar.gz \
# 		$(TARFILES:%=microc/%)


#----------------------------------------------------------------------------

# TARFILES = Makefile scannerAlt.mll parserAlt.mly astAlt.mli hello_world.ml
#
# OBJS = parserAlt.cmo scannerAlt.cmo hello_world.cmo
#
# hello_world : $(OBJS)
# 	ocamlc -o hello_world $(OBJS)
#
# scannerAlt.ml : scannerAlt.mll
# 	ocamllex scannerAlt.mll
#
# parserAlt.ml parserAlt.mli : parserAlt.mly
# 	ocamlyacc parserAlt.mly
#
# %.cmo : %.ml
# 	ocamlc -c $<
#
# %.cmi : %.mli
# 	ocamlc -c $<
#
# calculator.tar.gz : $(TARFILES)
# 	cd .. && tar zcf calculator/calculator.tar.gz $(TARFILES:%=calculator/%)
#
# .PHONY : clean
# clean :
# 	rm -f hello_world parserAlt.ml parserAlt.mli scannerAlt.ml *.cmo *.cmi
#
# # Generated by ocamldep *.ml *.mli
# hello_world.cmo: scannerAlt.cmo parserAlt.cmi astAlt.cmi
# hello_world.cmx: scannerAlt.cmx parserAlt.cmx astAlt.cmi
# parserAlt.cmo: astAlt.cmi parserAlt.cmi
# parserAlt.cmx: astAlt.cmi parserAlt.cmi
# scannerAlt.cmo: parserAlt.cmi
# scannerAlt.cmx: parserAlt.cmx
# parserAlt.cmi: astAlt.cmi
